#!/bin/bash
set -e

# Global and Quiz variables{{{
DISPLAY_COMMAND="cat"
F_DEBUG=""
F_INV="0"
INPUT_FILES=()
INPUT_FILES_N=0
INPUT_SEPARATOR="	"
Q_CORRECT=0
Q_TOTAL=0
Q_ERROR_N=0
Q_ERRORS=()
LISTSTATS=0
REDO_ERRORS=""
SCORE_FILE="-"
# Global variables}}}

# Parsing command line options{{{
while getopts "irhes:f:d1l" opt;
do
	case $opt in
		i)
			F_INV="1"
			[ $F_DEBUG ] && echo "Inverse mode is on"
			;;
		r)
			DISPLAY_COMMAND="shuf"
			[ $F_DEBUG ] && echo "Random mode is on"
			;;
		s)
			INPUT_SEPARATOR="$OPTARG"
			[ $F_DEBUG ] && echo "Separator set"
			;;
		f)
			SCORE_FILE="$OPTARG"
			[ $F_DEBUG ] && echo "Output file set"
			;;
		d)
			F_DEBUG="1"
			echo "Debug flag on"
			;;
		e)
			REDO_ERRORS="1"
			[ $F_DEBUG ] && echo "Error reask set"
			;;
		1)
			ONETIME="1"
			[ $F_DEBUG ] && echo "One time only set"
			;;
		l)
			LISTSTATS="1"
			[ $F_DEBUG ] && echo "Listing statistics set"
			;;
		h)
			echo "Usage:"
			echo "	$0 [options] file1 [file2 [file3 ... [filen]]]"
			echo
			echo "Options:"
			echo "	-e      Reask questions that you had wrong in the end"
			echo "	-f FILE Scores file, default: -"
			echo "	-h      Show this help"
			echo "	-i      Inverse the question and answer, default: false"
			echo "  -l      List the statistics about files, default: false"
			echo "	-r      Randomize the questions, default: false"
			echo "	-s SEP  Custom separator, default: tab"
			echo "  -1      One time only, don't write a stats file"
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			;;
	esac
done
if [ "$OPTIND" -gt "$#" ]
then
	echo "You have to specify at least on file" >&2
	echo "Usage:" >&2
	echo "	$0 [options] file1 [file2 [file3 ... [filen]]]" >&2
	exit
fi
# Parsing command line options}}}

# Quizzing{{{
while [ "$OPTIND" -le "$#" ]
do
	INPUT_FILES[INPUT_FILES_N]="${!OPTIND}"
	if [ "$LISTSTATS" = 0 ]
	then
		TMPFILE=$(mktemp)
		[ $F_DEBUG ] && echo "Temp file created: $TMPFILE"
		$DISPLAY_COMMAND "${INPUT_FILES[INPUT_FILES_N]}" >> "$TMPFILE"
		[ $F_DEBUG ] && echo "File shuffled and written to temp"
		exec 3<> "$TMPFILE"
		[ $F_DEBUG ] && echo "Opening temp file descriptor"
		while read -u 3 line
		do
			QUESTION=$(echo "$line" | cut -n -d "$INPUT_SEPARATOR" -f 1)
			[ $F_DEBUG ] && echo "Question extracted: $QUESTION"
			ANSWER=$(echo "$line" | cut -n -d "$INPUT_SEPARATOR" -f 2)
			[ $F_DEBUG ] && echo "Answer extracted: $ANSWER"
			if [ $F_INV = "1" ]
			then
				TEMP="$QUESTION"
				QUESTION="$ANSWER"
				ANSWER="$TEMP"
				[ $F_DEBUG ] && echo "Question and answer swapped"
			fi
			echo "$QUESTION"
			echo -n "> "
			read YOURANSWER
			echo -n "The answer is: $ANSWER, "
			if [ "$ANSWER" = "$YOURANSWER" ]
			then
				echo "This is correct!"
				Q_CORRECT=$((Q_CORRECT + 1))
			else
			 	echo "Incorrect..."
				ERRORS[Q_ERRORS_N]="$QUESTION"
				Q_ERRORS_N=$((Q_ERRORS_N + 1))
				if [ $REDO_ERRORS ]
				then
					if [ $F_INV = "0" ]
					then
						echo "$ANSWER	$QUESTION" >>$TMPFILE
					else
						echo "$QUESTION	$ANSWER" >>$TMPFILE
					fi
				fi
			fi
			Q_TOTAL=$((Q_TOTAL + 1))
			[ $F_DEBUG ] && echo "Total questions asked: $Q_TOTAL"
		done
		exec 3>&-
		[ $F_DEBUG ] && echo "Closing temp file descriptor"
	fi
	OPTIND=$((OPTIND + 1))
	INPUT_FILES_N=$((INPUT_FILES_N + 1))
done
# Quizzing}}}

# Open and/or prepare stats file{{{
if [ $SCOREFILE ]
then
	SCORE_STREAM="$SCOREFILE"
	[ $F_DEBUG ] && echo "Manual score file opened: $SCORE_STREAM"
else
	SCORE_STREAM=$(printf "_%s" "${INPUT_FILES[@]}")
	SCORE_STREAM="${SCORE_STREAM:1}.stats"
	[ $F_DEBUG ] && echo "Score file opened: $SCORE_STREAM"
fi
if [ ! -s "$SCORE_STREAM" ]
then
	echo -e "Date\tTotal\tCorrect\tGrade\tInverse\tErrors" > $SCORE_STREAM
	[ $F_DEBUG ] && echo "Header written"
fi
# Open and/or prepare stats file}}}

if [ "$LISTSTATS" = "0" ]
then
	# Output scores and process statistics{{{
	Q_GRADE=$(( ($Q_CORRECT*100)/10 ))
	ERRORS=$(printf "_%s" "${ERRORS[@]}")
	ERRORS=${ERRORS:1}
	echo "Total: $Q_TOTAL"
	echo "Correct: $Q_CORRECT"
	echo "Grade: $Q_GRADE/100"
	echo "Errors: $ERRORS"
	
	echo -en "$(date +%Y-%m-%d\ %H:%m:%S)\t" >> $SCORE_STREAM
	[ $F_DEBUG ] && echo "Date written"
	echo -e "$Q_TOTAL\t$Q_CORRECT\t$Q_GRADE\t$F_INV\t$ERRORS" >> $SCORE_STREAM
	[ $F_DEBUG ] && echo "Data written"
	# Output scores}}}
else
	# List statistics{{{
	awk '{sum+=$3;print}END{print "Avg: ",sum/NR}' "$SCORE_STREAM" | column -t
	# List statistics}}}
fi
